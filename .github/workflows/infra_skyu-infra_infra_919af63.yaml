name: infra_skyu-infra_infra_919af63 Pipeline (Skyu Generated)
'on':
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - closed
    paths:
      - .github/workflows/infra-default_infra_919af63.yaml
      - .github
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_eaa76acc-22af-49e9-a2b5-e716b1659772
env:
  ENCODED_PIPELINE_SECRET: ${{secrets.DEMOCRONJOB_INFRA_SKYUINFRA_INFRA_919AF63}}
  COMMIT_ID: ${{github.event.client_payload.commitId || github.sha || github.run_id}}
  BRANCH_NAME: >-
    ${{github.event.client_payload.branchName || github.event.branch ||
    github.ref_name}}
jobs:
  _status-pending:
    name: ' Status Pending'
    permissions: write-all
    env:
      CONTEXT_JSON: ${{ toJson(github) }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Run :: Start'
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Run :: Checkout Specific Commit'
        env:
          COMMIT_ID: ${{ github.event.client_payload.commitId }}
          BRANCH_NAME: ${{ github.event.client_payload.branchName }}
        if: >-
          ${{ github.event.client_payload.commitId != null ||
          github.event.client_payload.branchName != null }}
        run: |2-

              echo "Starting the checkout process..."
              git fetch --all
              if [ -n "$COMMIT_ID" ]; then
                echo "Commit ID provided: $COMMIT_ID"
                git checkout $COMMIT_ID || true
                echo "Checked out to commit ID: $COMMIT_ID"
              elif [ -n "$BRANCH_NAME" ]; then
                echo "Branch name provided: $BRANCH_NAME"
                git checkout $BRANCH_NAME || true
                echo "Checked out to branch: $BRANCH_NAME"

                #Updating the commit Id
                ACTUAL_COMMIT_ID=$(git rev-parse HEAD)
                echo "Changing CommitId: $ACTUAL_COMMIT_ID"
                echo "COMMIT_ID=$ACTUAL_COMMIT_ID" >> $GITHUB_ENV
              else
                echo "Skipping checkout..."
              fi
            
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Pipeline Started'
        env:
          RUN_ID: ${{ github.run_id }}
        run: |2-

              context=$(echo "$CONTEXT_JSON" | jq --arg sha "$COMMIT_ID" '.sha = $sha' | jq -c . | base64)
              response=$(curl -X PUT -d "runId=$RUN_ID&context=$context"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.PIPELINE_SERVICE_EP }}/${{ env.PIPELINE_ID }}/PENDING?releaseId=${{ github.event.client_payload.releaseData.releaseId }}")
              if echo "$response" | grep -q '"success":true'; then
                echo "SUCCESS :: $response"
              else
                echo "FAILED :: $response"
              fi
              
  _status_testing:
    name: ' Status Testing'
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - _status-pending
    steps:
      - name: 'Run :: Start'
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Run :: Checkout Specific Commit'
        env:
          COMMIT_ID: ${{ github.event.client_payload.commitId }}
          BRANCH_NAME: ${{ github.event.client_payload.branchName }}
        if: >-
          ${{ github.event.client_payload.commitId != null ||
          github.event.client_payload.branchName != null }}
        run: |2-

              echo "Starting the checkout process..."
              git fetch --all
              if [ -n "$COMMIT_ID" ]; then
                echo "Commit ID provided: $COMMIT_ID"
                git checkout $COMMIT_ID || true
                echo "Checked out to commit ID: $COMMIT_ID"
              elif [ -n "$BRANCH_NAME" ]; then
                echo "Branch name provided: $BRANCH_NAME"
                git checkout $BRANCH_NAME || true
                echo "Checked out to branch: $BRANCH_NAME"

                #Updating the commit Id
                ACTUAL_COMMIT_ID=$(git rev-parse HEAD)
                echo "Changing CommitId: $ACTUAL_COMMIT_ID"
                echo "COMMIT_ID=$ACTUAL_COMMIT_ID" >> $GITHUB_ENV
              else
                echo "Skipping checkout..."
              fi
            
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Pipeline Testing'
        run: |2-

              # NOTE: Do not remove this job even if you don't have tests at the moment.
              echo "Hello Tests from SkyU"
              
  Plan:
    name: Plan
    permissions: write-all
    env:
      RUNS_ID: ${{ github.run_id }}
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      CREDENTIAL_ID: ${{ secrets.CREDENTIAL_ID }}
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      ORGANIZATION_ID: ${{ secrets.ORGANIZATION_ID }}
      SERVICE_ACCOUNT_TOKEN: ${{ secrets.SERVICE_ACCOUNT_TOKEN }}
    runs-on: ubuntu-latest
    needs:
      - _status_testing
    steps:
      - name: 'Run :: Start'
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Run :: Checkout Specific Commit'
        env:
          COMMIT_ID: ${{ github.event.client_payload.commitId }}
          BRANCH_NAME: ${{ github.event.client_payload.branchName }}
        if: >-
          ${{ github.event.client_payload.commitId != null ||
          github.event.client_payload.branchName != null }}
        run: |2-

              echo "Starting the checkout process..."
              git fetch --all
              if [ -n "$COMMIT_ID" ]; then
                echo "Commit ID provided: $COMMIT_ID"
                git checkout $COMMIT_ID || true
                echo "Checked out to commit ID: $COMMIT_ID"
              elif [ -n "$BRANCH_NAME" ]; then
                echo "Branch name provided: $BRANCH_NAME"
                git checkout $BRANCH_NAME || true
                echo "Checked out to branch: $BRANCH_NAME"

                #Updating the commit Id
                ACTUAL_COMMIT_ID=$(git rev-parse HEAD)
                echo "Changing CommitId: $ACTUAL_COMMIT_ID"
                echo "COMMIT_ID=$ACTUAL_COMMIT_ID" >> $GITHUB_ENV
              else
                echo "Skipping checkout..."
              fi
            
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Launch Template Starts Status [LAUNCH_TEMPLATE] [STARTED]
        run: >-
          curl --location --request POST '${{ secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?stepName=Plan-Launch-Template&status=Started'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: >-
            ${{secrets.ROLE_ARN_GHJHGJ_INFRA_919AF633_1E76_48D4_AF33_A7C8F25B5E8D}}
      - name: Create Credentials File
        run: >-
          mkdir $HOME/.aws/ && touch $HOME/.aws/credentials && echo "[default]"
          > $HOME/.aws/credentials && echo
          "aws_access_key_id=${{env.AWS_ACCESS_KEY_ID}}" >>
          $HOME/.aws/credentials && echo
          "aws_secret_access_key=${{env.AWS_SECRET_ACCESS_KEY}}" >>
          $HOME/.aws/credentials && echo
          "aws_session_token=${{env.AWS_SESSION_TOKEN}}" >>
          $HOME/.aws/credentials
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - name: Download Terragrunt
        run: >-
          wget
          https://github.com/gruntwork-io/terragrunt/releases/download/v0.50.6/terragrunt_linux_amd64
          && mv terragrunt_linux_amd64 terragrunt && chmod u+x terragrunt && mv
          terragrunt /usr/local/bin/terragrunt
      - name: Terragrunt Version Check
        working-directory: .github
        run: terragrunt version
      - name: Push Terragrunt Status [INIT] [IN_PROGRESS]
        run: >-
          curl --location --request POST '${{ secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?stepName=Plan-Terragrunt-Init&status=InProgress'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN"
      - name: Terragrunt Init
        working-directory: .github
        run: terragrunt init --terragrunt-non-interactive
      - name: Push Terragrunt Status [INIT] [FAILED]
        run: >-
          curl --location --request POST '${{ secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?stepName=Plan-Terragrunt-Init&status=Failed'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN"
        if: failure()
      - name: Push Terragrunt Status [INIT] [SUCCESS]
        run: >-
          curl --location --request POST '${{ secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?stepName=Plan-Terragrunt-Init&status=Success'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN"
      - name: '[SLEEP]'
        run: sleep 3
      - name: Push Terragrunt Status [PLAN] [IN_PROGRESS]
        run: >-
          curl --location --request POST '${{ secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?stepName=Plan-Terragrunt-Plan&status=InProgress'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN"
      - name: Terragrunt Plan
        working-directory: .github
        run: >-
          terragrunt plan -out plan.out && terragrunt show -json plan.out >
          plan.json
      - name: Upload Terragrunt Plan Content
        working-directory: .github
        run: >-
          TERRAGRUNT_PLAN=$(cat plan.json) && echo "$TERRAGRUNT_PLAN" >
          terragrunt_plan.json && curl --location --request POST "${{
          secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?fileKey=Plan&runsId=${{
          env.RUNS_ID }}" --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --form "file=@terragrunt_plan.json"
      - name: Run Rover to generate diagram
        working-directory: .github
        run: >-
          docker run --rm -v $(pwd):/src im2nguyen/rover -planJSONPath=plan.json
          -genImage true
      - name: Upload Resource Diagram
        working-directory: .github
        run: >-
          curl --location --request POST "${{ secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?fileKey=Diagram&runsId=${{
          env.RUNS_ID }}" --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --form "file=@rover.svg"
      - name: Run Rover to generate diagram
        working-directory: .github
        run: >-
          docker run --rm -d -p 9000:9000 -v $(pwd):/src im2nguyen/rover
          -planJSONPath=plan.json
      - name: Fetch and Upload Terragrunt Map Content
        working-directory: .github
        run: >-
          if curl http://localhost:9000/api/map -o map.json; then
          TERRAGRUNT_MAP=$(cat map.json) && echo "$TERRAGRUNT_MAP" >
          terragrunt_map.json && curl --location --request POST "${{
          secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?fileKey=Map&runsId=${{
          env.RUNS_ID }}" --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --form "file=@terragrunt_map.json"; else echo
          'Failed to fetch map.json'; fi
      - name: Fetch and Upload Terragrunt Graph Content
        working-directory: .github
        run: >-
          if curl http://localhost:9000/api/graph -o graph.json; then
          TERRAGRUNT_GRAPH=$(cat graph.json) && echo "$TERRAGRUNT_GRAPH" >
          terragrunt_graph.json && curl --location --request POST "${{
          secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?fileKey=Graph&runsId=${{
          env.RUNS_ID }}" --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --form "file=@terragrunt_graph.json"; else
          echo 'Failed to fetch graph.json'; fi
      - name: Fetch and Upload Terragrunt RSO Content
        working-directory: .github
        run: >-
          if curl http://localhost:9000/api/rso -o rso.json; then
          TERRAGRUNT_RSO=$(cat rso.json) && echo "$TERRAGRUNT_RSO" >
          terragrunt_rso.json && curl --location --request POST "${{
          secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?fileKey=Rso&runsId=${{
          env.RUNS_ID }}" --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --form "file=@terragrunt_rso.json"; else echo
          'Failed to fetch rso.json'; fi
      - name: Check if INFRACOST_API_KEY is set
        run: |-
          if [ -z "${{ secrets.INFRACOST_API_KEY }}" ]; then
            echo "INFRACOST_API_KEY is not set"
            echo "::set-output name=run_infracost::false"
          else
            echo "INFRACOST_API_KEY is set"
            echo "::set-output name=run_infracost::true"
          fi
        id: check_infracost_api_key
      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        if: steps.check_infracost_api_key.outputs.run_infracost == 'true'
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
      - name: Setup, Generate, Upload, and Comment Infracost
        working-directory: .github
        run: >-
          infracost breakdown --path=. --format=json
          --out-file=infracost-base.json && infracost diff --path=.
          --format=json --compare-to=infracost-base.json
          --out-file=infracost.json && curl --location --request POST "${{
          secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?fileKey=Infracost&runsId=${{
          env.RUNS_ID }}" --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --form "file=@infracost.json"
        if: steps.check_infracost_api_key.outputs.run_infracost == 'true'
      - name: Push Terragrunt Status [PLAN] [FAILED]
        run: >-
          curl --location --request POST '${{ secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?stepName=Plan-Terragrunt-Plan&status=Failed'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN"
        if: failure()
      - name: Push Terragrunt Status [PLAN] [SUCCESS]
        run: >-
          curl --location --request POST '${{ secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?stepName=Plan-Terragrunt-Plan&status=Success'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN"
  Apply:
    name: Apply
    permissions: write-all
    env:
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      CREDENTIAL_ID: ${{ secrets.CREDENTIAL_ID }}
      ORGANIZATION_ID: ${{ secrets.ORGANIZATION_ID }}
      SERVICE_ACCOUNT_TOKEN: ${{ secrets.SERVICE_ACCOUNT_TOKEN }}
    runs-on: ubuntu-latest
    needs:
      - Plan
      - _status_testing
    if: github.event.pull_request.merged == true
    steps:
      - name: 'Run :: Start'
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Run :: Checkout Specific Commit'
        env:
          COMMIT_ID: ${{ github.event.client_payload.commitId }}
          BRANCH_NAME: ${{ github.event.client_payload.branchName }}
        if: >-
          ${{ github.event.client_payload.commitId != null ||
          github.event.client_payload.branchName != null }}
        run: |2-

              echo "Starting the checkout process..."
              git fetch --all
              if [ -n "$COMMIT_ID" ]; then
                echo "Commit ID provided: $COMMIT_ID"
                git checkout $COMMIT_ID || true
                echo "Checked out to commit ID: $COMMIT_ID"
              elif [ -n "$BRANCH_NAME" ]; then
                echo "Branch name provided: $BRANCH_NAME"
                git checkout $BRANCH_NAME || true
                echo "Checked out to branch: $BRANCH_NAME"

                #Updating the commit Id
                ACTUAL_COMMIT_ID=$(git rev-parse HEAD)
                echo "Changing CommitId: $ACTUAL_COMMIT_ID"
                echo "COMMIT_ID=$ACTUAL_COMMIT_ID" >> $GITHUB_ENV
              else
                echo "Skipping checkout..."
              fi
            
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Launch Template Starts Status [LAUNCH_TEMPLATE] [STARTED]
        run: >-
          curl --location --request POST '${{ secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?stepName=Plan-Launch-Template&status=Started'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: >-
            ${{secrets.ROLE_ARN_GHJHGJ_INFRA_919AF633_1E76_48D4_AF33_A7C8F25B5E8D}}
      - name: Create Credentials File
        run: >-
          mkdir $HOME/.aws/ && touch $HOME/.aws/credentials && echo "[default]"
          > $HOME/.aws/credentials && echo
          "aws_access_key_id=${{env.AWS_ACCESS_KEY_ID}}" >>
          $HOME/.aws/credentials && echo
          "aws_secret_access_key=${{env.AWS_SECRET_ACCESS_KEY}}" >>
          $HOME/.aws/credentials && echo
          "aws_session_token=${{env.AWS_SESSION_TOKEN}}" >>
          $HOME/.aws/credentials
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - name: Download Terragrunt
        run: >-
          wget
          https://github.com/gruntwork-io/terragrunt/releases/download/v0.50.6/terragrunt_linux_amd64
          && mv terragrunt_linux_amd64 terragrunt && chmod u+x terragrunt && mv
          terragrunt /usr/local/bin/terragrunt
      - name: Terragrunt Version Check
        working-directory: .github
        run: terragrunt version
      - name: Push Terragrunt Status [INIT] [IN_PROGRESS]
        run: >-
          curl --location --request POST '${{ secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?stepName=Plan-Terragrunt-Init&status=InProgress'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN"
      - name: Terragrunt Init
        working-directory: .github
        run: terragrunt init --terragrunt-non-interactive
      - name: Push Terragrunt Status [INIT] [FAILED]
        run: >-
          curl --location --request POST '${{ secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?stepName=Plan-Terragrunt-Init&status=Failed'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN"
        if: failure()
      - name: Push Terragrunt Status [INIT] [SUCCESS]
        run: >-
          curl --location --request POST '${{ secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?stepName=Plan-Terragrunt-Init&status=Success'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN"
      - name: Push Terragrunt Status [APPLY] [IN_PROGRESS]
        run: >-
          curl --location --request POST '${{ secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?stepName=Terragrunt-Apply&status=InProgress'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN"
      - name: Terragrunt Apply
        working-directory: .github
        run: terragrunt apply --terragrunt-non-interactive -auto-approve
      - name: Push Terragrunt Status [APPLY] [FAILED]
        run: >-
          curl --location --request POST '${{ secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?stepName=Terragrunt-Apply&status=Failed'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN"
        if: failure()
      - name: Push Terragrunt Status [APPLY] [SUCCESS]
        working-directory: .github
        run: >-
          TERRAGRUNT_OUTPUT=$(terragrunt output --json) && curl --location
          --request POST "${{ secrets.API_URL
          }}/infrastructure-service/infrastructure/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d?stepName=Terragrunt-Apply&status=Success"
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --header "Content-Type: application/json"
          --data "{\"terragruntoutputs\": $TERRAGRUNT_OUTPUT}"
      - name: Delete Infra Branch
        run: >-
          curl --location --request DELETE '${{ secrets.API_URL
          }}/infrastructure-service/infrastructure/branch/infra_919af633-1e76-48d4-af33-a7c8f25b5e8d'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN"
  _status-success:
    name: ' Status Success'
    permissions: write-all
    env:
      CONTEXT_JSON: ${{ toJson(github) }}
    runs-on: ubuntu-latest
    needs:
      - _status_testing
      - Plan
      - Apply
    if: ${{ !(failure() || cancelled()) }}
    steps:
      - name: 'Run :: Start'
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Run :: Checkout Specific Commit'
        env:
          COMMIT_ID: ${{ github.event.client_payload.commitId }}
          BRANCH_NAME: ${{ github.event.client_payload.branchName }}
        if: >-
          ${{ github.event.client_payload.commitId != null ||
          github.event.client_payload.branchName != null }}
        run: |2-

              echo "Starting the checkout process..."
              git fetch --all
              if [ -n "$COMMIT_ID" ]; then
                echo "Commit ID provided: $COMMIT_ID"
                git checkout $COMMIT_ID || true
                echo "Checked out to commit ID: $COMMIT_ID"
              elif [ -n "$BRANCH_NAME" ]; then
                echo "Branch name provided: $BRANCH_NAME"
                git checkout $BRANCH_NAME || true
                echo "Checked out to branch: $BRANCH_NAME"

                #Updating the commit Id
                ACTUAL_COMMIT_ID=$(git rev-parse HEAD)
                echo "Changing CommitId: $ACTUAL_COMMIT_ID"
                echo "COMMIT_ID=$ACTUAL_COMMIT_ID" >> $GITHUB_ENV
              else
                echo "Skipping checkout..."
              fi
            
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Pipeline Success'
        env:
          RUN_ID: ${{ github.run_id }}
        run: |2-

              context=$(echo "$CONTEXT_JSON" | jq --arg sha "$COMMIT_ID" '.sha = $sha' | jq -c . | base64)
              response=$(curl -X PUT -d "runId=$RUN_ID&context=$context"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.PIPELINE_SERVICE_EP }}/${{ env.PIPELINE_ID }}/SUCCESS?releaseId=${{ github.event.client_payload.releaseData.releaseId }}")
              
  _status-failed:
    name: ' Status Failed'
    permissions: write-all
    env:
      CONTEXT_JSON: ${{ toJson(github) }}
    runs-on: ubuntu-latest
    needs:
      - _status_testing
      - Plan
      - Apply
    if: ${{ failure() || cancelled() }}
    steps:
      - name: 'Run :: Start'
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Run :: Checkout Specific Commit'
        env:
          COMMIT_ID: ${{ github.event.client_payload.commitId }}
          BRANCH_NAME: ${{ github.event.client_payload.branchName }}
        if: >-
          ${{ github.event.client_payload.commitId != null ||
          github.event.client_payload.branchName != null }}
        run: |2-

              echo "Starting the checkout process..."
              git fetch --all
              if [ -n "$COMMIT_ID" ]; then
                echo "Commit ID provided: $COMMIT_ID"
                git checkout $COMMIT_ID || true
                echo "Checked out to commit ID: $COMMIT_ID"
              elif [ -n "$BRANCH_NAME" ]; then
                echo "Branch name provided: $BRANCH_NAME"
                git checkout $BRANCH_NAME || true
                echo "Checked out to branch: $BRANCH_NAME"

                #Updating the commit Id
                ACTUAL_COMMIT_ID=$(git rev-parse HEAD)
                echo "Changing CommitId: $ACTUAL_COMMIT_ID"
                echo "COMMIT_ID=$ACTUAL_COMMIT_ID" >> $GITHUB_ENV
              else
                echo "Skipping checkout..."
              fi
            
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Pipeline Failed'
        env:
          RUN_ID: ${{ github.run_id }}
        run: |2-

              context=$(echo "$CONTEXT_JSON" | jq --arg sha "$COMMIT_ID" '.sha = $sha' | jq -c . | base64)
              response=$(curl -X PUT -d "runId=$RUN_ID&context=$context"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.PIPELINE_SERVICE_EP }}/${{ env.PIPELINE_ID }}/FAILED?releaseId=${{ github.event.client_payload.releaseData.releaseId }}")

              # Triggering SkyU Alerts
              response=$(curl -X POST -d "labels[alertname]=pipelineFailed&labels[pipelineId]=${{ env.PIPELINE_ID }}&message=Pipeline Failed&messageTitle=Pipeline ${{ env.PIPELINE_ID }} Failed&status=firing"  -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.FIRE_SKYU_ALERT_EP }}?organizationId=${{ env.PIPELINE_ORGANIZATION_ID }}&projectId=${{ env.PIPELINE_PROJECT_ID }}&environmentId=${{ env.PIPELINE_ENVIRONMENT_ID }}&token=${{ env.SERVICE_ACC_ACCESS_TOKEN_STRIPPED }}&authBy=sa")

              if echo "$response" | grep -q '"success":true'; then
                echo "SUCCESS :: $response"
              else
                echo "FAILED :: $response"
              fi
              
